#!/bin/sh
#
# -1 --onebased flag to number FR IDs from 1 rather than 0
# -a --alpha    the fraction of a supporting strain's sequence that actually supports the FR; alternatively, `1-alpha` is the fraction of inserted sequence
# -k --kappa    the maximum insertion length (measured in bp) that any supporting path may have
# -m --minsup   [1] minimum number of genome paths in order for a region to be considered frequent
# -z --minsize  [1] minimum number of de Bruijn nodes that an FR must contain to be considered frequent
# -r --rc       flag to indicate whether the sequence (e.g. FASTA file) had its reverse complement appended

export JAVA_OPTS="-Xmx800g -XX:+UseParallelGC -Xms2g -XX:SoftRefLRUPolicyMSPerMB=1 -XX:MaxHeapFreeRatio=99"

DATASET="HTT"

MEM=60

ALPHA=0.2
KAPPA=30
MINSUP=2
MINSIZE=1

export PREFIX="FR-a$ALPHA-kp$KAPPA-sup$MINSUP-sz$MINSIZE"
export DOT="HDStudy+1kG.$DATASET.k$MEM"
export FASTA="HDStudy+1kG.$DATASET"
export FRDIR="FR-$DOT.dot-$FASTA.fasta"

export TRAIN="$FRDIR/$DOT.train"
export TEST="$FRDIR/$DOT.test"
export BOTH="$FRDIR/$DOT.both"

TRAINSCALE="$TRAIN.scale"
TESTSCALE="$TEST.scale"
BOTHSCALE="$BOTH.scale"

RANGE="$FRDIR/$DOT.range"

GRIDOUT="$TRAIN.grid"
MODEL="$TRAIN.model"
PREDICT="$TEST.predict"

TRAINVALUES="1	1	1	1	1	1	1	1	1	1	1	1	1	1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1"
TESTVALUES="1	1	1	1	1	1	1	1	1	1	1	1	1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1"

# delete the output from a previous run
rm -f $TRAIN
rm -f $TEST
rm -f $BOTH
rm -f $TRAINSCALE
rm -f $TESTSCALE
rm -f $BOTHSCALE
rm -f $RANGE
rm -f $GRIDOUT
rm -f $MODEL
rm -f $PREDICT

################
# run FRFinder #
################
ARGS="-1 -v -d HDStudy/$DOT.dot -f HDStudy/$FASTA.fasta --alpha $ALPHA --kappa $KAPPA --minsup $MINSUP --minsize $MINSIZE"
echo "-------------------------"
echo "FRFinder $ARGS"
java -cp build/install/fr/lib/fr.jar:build/install/fr/lib/commons-cli-1.4.jar:build/install/fr/lib/graphviz-java-0.8.0.jar:build/install/fr/lib/protobuf-java-3.6.1.jar org.ncgr.pangenomics.fr.FRFinder $ARGS

IFRS=`cat $FRDIR/$PREFIX.frs.txt | wc -l`

# build the training and testing files
echo "-------------------------"
echo "sh build-$DATASET-files"
sh build-$DATASET-files

# scale on combined data to get range
echo "-------------------------"
echo "SvmScaler -s $RANGE $BOTH > $BOTHSCALE"
java -cp build/install/fr/lib/fr.jar:build/install/fr/lib/commons-cli-1.4.jar org.ncgr.svm.SvmScaler -s $RANGE $BOTH > $BOTHSCALE

# apply scale factors to training and testing data
echo "-------------------------"
echo "SvmScaler -r $RANGE $TRAIN > $TRAINSCALE"
java -cp build/install/fr/lib/fr.jar:build/install/fr/lib/commons-cli-1.4.jar org.ncgr.svm.SvmScaler -r $RANGE $TRAIN > $TRAINSCALE
echo "-------------------------"
echo "SvmScaler -r $RANGE $TEST > $TESTSCALE"
java -cp build/install/fr/lib/fr.jar:build/install/fr/lib/commons-cli-1.4.jar org.ncgr.svm.SvmScaler -r $RANGE $TEST > $TESTSCALE

# run GridSearcher on scaled training data
ARGS="-log2c -5,15,2 -log2g 3,-15,-2 -k 10 $TRAINSCALE"
echo "-------------------------"
echo "GridSearcher $ARGS"
java -cp build/install/fr/lib/fr.jar:build/install/fr/lib/commons-cli-1.4.jar org.ncgr.svm.GridSearcher $ARGS > $GRIDOUT
C=`tail -1 $GRIDOUT | awk '{ print $1; }'`
gamma=`tail -1 $GRIDOUT | awk '{ print $2; }'`
perc=`tail -1 $GRIDOUT | awk '{ print $3; }'`
echo "C=$C"
echo "gamma=$gamma"
echo "perc=$perc"

# train on the scaled training set with the above parameters to get the model
echo "-------------------------"
echo "SvmTrainer -c $C -g $gamma $TRAINSCALE $MODEL"
java -cp build/install/fr/lib/fr.jar:build/install/fr/lib/commons-cli-1.4.jar org.ncgr.svm.SvmTrainer -c $C -g $gamma $TRAINSCALE $MODEL

# now run the predictor on the scaled test data with this model
echo "-------------------------"
echo "SvmPredictor $TESTSCALE $MODEL $PREDICT"
java -cp build/install/fr/lib/fr.jar:build/install/fr/lib/commons-cli-1.4.jar org.ncgr.svm.SvmPredictor $TESTSCALE $MODEL $PREDICT

# compare to what it should be
echo "TESTS:"
echo $TESTVALUES
echo "PREDICTIONS:"
cat $PREDICT
echo ""

# cross validate on full dataset
ARGS="-c $C -g $gamma -k 10 $BOTHSCALE"
echo "-------------------------"
echo "SvmCrossValidator $ARGS"
java -cp build/install/fr/lib/fr.jar:build/install/fr/lib/commons-cli-1.4.jar org.ncgr.svm.SvmCrossValidator $ARGS

echo "$MEM	$ALPHA	$KAPPA	$MINSUP	$MINSIZE	$IFRS	$C	$gamma"
cat $PREDICT
echo ""
