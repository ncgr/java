package org.ncgr.chatbot.openai;

import java.time.Duration;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.theokanning.openai.OpenAiHttpException;

import com.theokanning.openai.embedding.Embedding;
import com.theokanning.openai.embedding.EmbeddingRequest;
import com.theokanning.openai.embedding.EmbeddingResult;

import com.theokanning.openai.service.OpenAiService;

import com.theokanning.openai.completion.CompletionChoice;
import com.theokanning.openai.completion.CompletionRequest;
import com.theokanning.openai.completion.CompletionResult;

import com.theokanning.openai.completion.chat.ChatCompletionRequest;
import com.theokanning.openai.completion.chat.ChatCompletionResult;
import com.theokanning.openai.completion.chat.ChatMessage;

/**
 * Class holding an OpenAI service with convenience methods.
 */
public class OpenAi {

    // default parameters
    public static String EMBED_MODEL = "text-embedding-ada-002";
    public static String MODEL = "gpt-3.5-turbo-0301";
    public static int TIMEOUT_SECONDS = 120;
    public static double TEMPERATURE = 0.0;
    public static double FREQUENCY_PENALTY = 0.0;
    public static double PRESENCE_PENALTY = 0.0;
    public static String USER = "shokin@ncgr.org";

    OpenAiService service;

    /**
     * Construct by instantiating an OpenAiService with an API key.
     */
    public OpenAi(String apiKey, int timeoutSeconds) {
        this.service = new OpenAiService(apiKey, Duration.ofSeconds(timeoutSeconds));
    }

    /**
     * Return the instance OpenAI service.
     */
    public OpenAiService getService() {
        return service;
    }

    /**
     * Return a ChatCompletionRequest for a given prompt and input parameters.
     *
     * Input parameters:
     *
     * Double temperature;
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower
     * values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.
     *
     * Double frequencyPenalty;
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far,
     * decreasing the model's likelihood to repeat the same line verbatim.
     *
     * Double presencePenalty;
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far,
     * increasing the model's likelihood to talk about new topics.
     *
     * List<ChatMessage> messages;
     * The messages to generate chat completions for, in the
     * <a href="https://platform.openai.com/docs/guides/chat/introduction">chat format</a>.
     *
     * Parameters set with defaults of this class:
     *
     * String model;
     * ID of the model to use. Currently, only gpt-3.5-turbo and gpt-3.5-turbo-0301 are supported.
     *
     * String user;
     * A unique identifier representing your end-user, which will help OpenAI to monitor and detect abuse.
     *
     * Parameters not in use:
     *
     * Integer maxTokens;
     * The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will
     * be (4096 - prompt tokens).
     *
     * Double topP;
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens
     * with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
     * We generally recommend altering this ort emperature but not both.
     *
     * Integer n;
     * How many chat completion chatCompletionChoices to generate for each input message.
     *
     * Boolean stream;
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format">server-sent events</a>
     * as they become available, with the stream terminated by a data: [DONE] message.
     *
     * List<String> stop;
     * Up to 4 sequences where the API will stop generating further tokens.
     *
     * Map<String, Integer> logitBias;
     * Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100
     * to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will
     * vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100
     * should result in a ban or exclusive selection of the relevant token.
     */
    public static ChatCompletionRequest getChatCompletionRequest(List<String> contexts, String query, double temperature, double frequencyPenalty, double presencePenalty) {
        // ChatMessages
        List<ChatMessage> messages = new ArrayList<>();
        // - system message instructs chat completion
        ChatMessage systemMessage = new ChatMessage();
        systemMessage.setRole("system");
        systemMessage.setContent("You are legumebot. You answer questions using only information provided in the assistant messages. " +
                                 "If the provided information is not sufficient to provide an answer, reply: 'The provided abstracts do not provide an answer to your question.'");
        messages.add(systemMessage);
        // - assistant messages contain contexts
        for (String context : contexts) {
            ChatMessage asstMessage = new ChatMessage();
            asstMessage.setRole("assistant");
            asstMessage.setContent(context);
            messages.add(asstMessage);
        }
        // - user message contains query
        ChatMessage userMessage = new ChatMessage();
        userMessage.setRole("user");
        userMessage.setContent("Respond to the following prompt based only on the content in the assistant chat messages:\n\n" +
                               query);
        messages.add(userMessage);
        // create request with model parameters
        ChatCompletionRequest request = new ChatCompletionRequest();
        request.setModel(MODEL);
        request.setUser(USER);
        request.setMessages(messages);
        request.setTemperature(temperature);
        request.setFrequencyPenalty(frequencyPenalty);
        request.setPresencePenalty(presencePenalty);
        return request;
    }
    
    /**
     * Get a ChatCompletionResult for a given ChatCompletionRequest.
     *
     * String id = Unique id assigned to this chat completion.
     * String object = The type of object returned, should be "chat.completion"
     * long created = The creation time in epoch seconds.
     * String model = The GPT-3.5 model used.
     * List<ChatCompletionChoice> choices = A list of all generated completions.
     * Usage usage = The API usage for this request.
     */
    public ChatCompletionResult getChatCompletionResult(ChatCompletionRequest request) throws OpenAiHttpException {
        return service.createChatCompletion(request);
    }

    /**
     * Retrieve embeddings for a query using the default EMBED_MODEL.
     *
     * @param query the query (question) being asked
     * @return a List of Float containing the encoded query  
     */
    public List<Float> getEncodedQuery(String query) {
        // create the embedding request
        EmbeddingRequest embeddingRequest = EmbeddingRequest.builder()
            .model(EMBED_MODEL)
            .input(Collections.singletonList(query))
            .build();
        // get the embeddings vector for the given question
        List<Embedding> embeddings = service.createEmbeddings(embeddingRequest).getData();
        List<Double> vector = embeddings.get(0).getEmbedding();
        // convert to List of Float
        List<Float> encodedQuery = new ArrayList<>();
        for (Double d : vector) {
            encodedQuery.add(d.floatValue());
        }
        return encodedQuery;
    }

    /**
     * Get embeddings for a List of contexts.
     * Requires: EMBED_MODEL
     *
     * @param contexts a List of string contexts to form embeddings
     * @return a List of Embeddings
     */
    public List<Embedding> getEmbeddings(List<String> contexts) throws OpenAiHttpException {
        EmbeddingRequest embeddingRequest = EmbeddingRequest.builder()
            .model(EMBED_MODEL)
            .input(contexts)
            .build();
	return service.createEmbeddings(embeddingRequest).getData();
    }

    /**
     * Get a single embedding for a single context.
     * Requires: EMBED_MODEL
     *
     * @param context a string context to form embeddings
     * @return an Embedding
     */
    public Embedding getEmbedding(String context) throws OpenAiHttpException {
        List<String> contexts = new ArrayList<>();
        contexts.add(context);
        EmbeddingRequest embeddingRequest = EmbeddingRequest.builder()
            .model(EMBED_MODEL)
            .input(contexts)
            .build();
        List<Embedding> embeddings = service.createEmbeddings(embeddingRequest).getData();
	return embeddings.get(0);
    }
    
    /**
     * Command-line utility.
     */
    public static void main(String[] args) {
        if (args.length<1) {
            System.err.println("OpenAi <query text>");
            System.exit(1);
        }
        String query = args[0];
	if (query.trim().length()==0) {
	    System.err.println("You must provide text with non-zero length.");
	    System.exit(1);
	}
        // get OpenAI API key from environment
        String apiKey = System.getenv().get("OPENAI_API_KEY");
	// construct and encode query s tring
        OpenAi openAi = new OpenAi(apiKey, TIMEOUT_SECONDS);
        System.out.println(openAi.getEncodedQuery(query));
    }

    /**
     * 1536-element embedding for "the", used for generic Pinecone queries without needing to hit the OpenAI API.
     */
    public static final List<Double> THE_EMBEDDING = List.of(0.0020724705, -0.004020559, -5.025699E-4, -0.030255044, -0.030362617, 0.02337034, -0.009466467, -0.019793522, -0.0072813807, -0.019793522,
							     0.030631552, 0.024271268, -0.0031381203, -0.0075973775, 0.004891232, -0.0017648776, 0.04114686, 0.008525199, 0.03635984, -0.029286882,
							     -0.017184865, 0.007933545, -0.006222454, -0.017924432, 2.4035951E-4, 0.0130163925, 0.014374508, -0.046525534, 0.015409903, -0.0021464273,
							     -0.013036562, -0.016848698, -0.041899875, -0.012175974, -0.024526756, -4.5487617E-5, -0.006804023, -0.008538646, 0.0025952104, -0.0056207147,
							     0.018247154, 0.008121799, 0.0029196118, -0.0016564636, 0.0048172753, 0.0019211953, 0.001152213, -0.0049584657, -0.041819192, -0.0071401903,
							     -0.007153637, 0.03541857, -0.022738347, -0.020102795, -0.008027672, -0.014024894, -0.012263378, -0.00906979, 0.014576208, 0.0020304497,
							     -0.0012539035, 0.0088546425, -0.010784242, 0.020519642, -0.0065888762, 0.006356921, -0.012626438, 0.026745459, 0.0037583488, -0.012128911,
							     0.038296163, 0.023343448, -0.0011984359, -0.005022337, 0.010132078, -0.028533868, -0.010125355, -0.008336945, -0.016001556, 0.0139845535,
							     0.015719175, -0.010918709, -0.026718566, 0.006155221, 0.008538646, 0.01667389, -0.0074965274, 0.017601712, 4.790382E-4, -0.011510363,
							     0.0043466412, 0.00573165, 0.00703934, 0.022940047, -0.014831695, -0.0013228178, -0.014845141, 0.022671113, 6.7527575E-4, -0.018072346,
							     -0.003386884, 0.014872035, -0.015961217, -0.015033395, -0.005217314, 0.007953715, -0.0091303, -2.8385114E-4, 0.023679614, -0.009163916,
							     -0.008733623, 0.03318642, -0.0038928157, -0.026489971, 0.0063636443, -0.020707896, 0.0041415794, -0.004931572, 0.0048475303, -9.194172E-4,
							     0.025185643, 0.017252099, 0.038887817, -0.030900484, 0.019215314, -0.008834473, -0.016862145, -0.021864312, -0.008276436, -3.712546E-4,
							     0.06013358, 5.761065E-4, 0.012458354, -0.012169251, -0.032352727, 0.02588487, -0.0127272885, 0.021044064, -0.019417014, -0.03517653,
							     -0.00701917, -0.00585267, -0.027565707, 0.0066527477, 0.013621493, 0.02109785, 0.021891205, 0.019121187, -0.0047332337, 0.005166889,
							     0.034826916, -0.007832695, 0.021676058, -0.006403984, 3.668424E-4, 0.012471802, -0.03184175, 0.0033078848, 5.408089E-4, -0.015678836,
							     -0.020398622, -0.017601712, 0.034047008, -0.008814302, 0.012175974, 0.03291749, 0.019766629, 0.01574607, 0.007946991, -0.014347614,
							     -0.011429683, 0.020721342, -0.032056898, 0.030900484, 0.002017003, 0.011375897, 8.9588546E-4, 0.007893205, -0.031357672, -0.003193588,
							     -0.012276825, 0.02421748, 0.02901795, 0.017628605, -0.023800634, 0.008370562, 0.015813302, 0.009963995, 0.0059904987, -0.023356894,
							     0.011671724, 0.0049382956, 0.022657666, 3.5350076E-5, -0.6828765, -0.03461177, -0.0058795633, -0.012478525, 0.010185865, 0.0091773635,
							     0.017400011, -0.0025952104, -0.023383787, 0.03797344, -0.014387954, 0.0056509697, -0.002805315, -0.00917064, -0.0069855535, 0.008424349,
							     -0.007852864, -0.0035129467, -0.010024505, -0.009574041, -0.021770185, 0.013466856, -0.012754181, 0.0013934128, 0.02532011, 0.0028086766,
							     0.0062090075, -0.017924432, -0.007294827, -0.0063266656, -0.01918842, 0.03047019, -0.007153637, -0.014159361, 0.015342669, -0.019376675,
							     -0.0231283, 0.03533789, 0.017588265, 0.05375985, -0.017668946, -0.021286104, -0.012034784, -8.3915726E-4, -9.555551E-4, 0.022482859,
							     0.03334778, 0.02443263, 0.01136245, 0.0063602827, 0.0059199035, -0.012660055, 0.009332, 0.0042020893, -0.014495527, -0.012001167,
							     0.011039729, -0.016082237, -0.0069922768, 0.015544369, 0.008747069, 0.013782853, -0.009890038, -0.01647219, -0.012612992, 0.019766629,
							     -0.0015547731, 0.0227249, 0.021487804, 0.012088571, -0.0044878316, 0.024365395, -0.013083626, -0.006430878, 0.029044842, 0.02775396,
							     0.031250097, 0.002864144, 0.0023145108, 0.018596767, 0.008054565, 0.006313219, 0.006205646, 0.010649775, 0.015006501, -0.038538203,
							     -0.019228762, 0.01858332, -0.0012807968, -0.0110800695, 0.012552481, 0.021366784, 0.0012707119, -0.014213148, 0.003139801, 0.0042827697,
							     5.307239E-4, 0.020075902, 0.0076713343, -0.020022115, 0.011933934, 0.005247569, 0.028856589, 0.0078058015, 0.021044064, -0.0023279574,
							     -0.024109907, 0.0063636443, 0.029125523, -0.03684392, -2.5296578E-4, -0.017588265, -0.018637108, -5.8146412E-5, 0.008041118, -0.02121887,
							     0.008948769, 0.024943603, 0.030497083, -0.036144692, 0.0061585824, 3.2692254E-4, 0.008538646, -0.009184087, 0.0057081184, 0.026866479,
							     -0.00695866, -0.021003723, -0.006699811, -0.013601323, 0.009358893, 0.026476525, 0.017722731, -0.030039897, 0.016942825, 0.01878502,
							     0.012216315, -0.022576986, 0.014576208, -0.0049080406, -0.023074513, 0.0075032506, -7.979768E-4, -0.0059299883, -0.003593627, -0.036790133,
							     0.004551703, -0.017507585, -0.0011017878, 0.025548704, 0.014414848, -0.0182606, -0.01797822, 0.028775908, 0.0093051065, -0.0130163925,
							     -0.019148082, -0.007368784, -0.018744681, -0.028883481, 0.008289882, 0.017789965, -0.014119021, -0.0029818027, -0.0066661946, -0.035633717,
							     -0.0020741513, 0.0015329223, -0.007933545, -0.036951493, 0.011954104, -2.500243E-4, 0.007859588, 0.00579216, 0.00923115, -0.00575182,
							     -6.329397E-5, -0.024163695, -0.008384009, -0.013608046, -0.02033139, -0.017184865, 0.0086596655, 0.0012244888, 0.026221039, -0.0016858783,
							     0.0029969302, -7.941949E-4, -0.02142057, 0.003396969, -0.015880536, -0.020438964, 0.0048945937, 0.017144525, 0.0031045037, -0.0074965274,
							     -0.011510363, 0.015127522, 1.343618E-4, 0.011066623, 0.021541592, -0.021850865, 0.04539601, -0.0013791258, 0.029878536, -0.033697397,
							     -0.007994055, -0.034315944, 0.02722954, 0.0073351674, 0.005015614, -0.027242986, -0.007879758, -0.0078864815, 0.010676669, 0.008162138,
							     0.015248542, 0.032648552, -0.004181919, -0.010730456, 8.807579E-4, -0.009916931, 0.013406346, -0.011194366, -7.8368967E-4, 0.0012547439,
							     0.012310442, 0.0057249265, -8.450402E-4, -0.010158971, -0.010905262, -0.007409124, -0.011658276, 0.014576208, -0.01190704, 0.010206034,
							     0.025427684, -0.003131397, 0.020721342, -0.001964897, -0.0180589, 0.011591043, 0.031196311, -0.02304762, 0.032567874, 0.009708507,
							     0.0133391125, 0.001150532, 0.0050324225, 0.0227249, 0.005015614, 0.01144313, -0.022603879, 0.0060644555, 0.008303328, -0.014791355,
							     0.0053585046, 0.011617937, 0.029555816, 0.010387565, 0.0024825945, -0.0104682455, -0.0080142245, -2.8048948E-4, 0.0026136995, 3.344863E-4,
							     -0.035203423, -0.014952715, 0.010616159, -0.0010748944, 0.009284937, -0.019080848, 0.0043231095, -0.020828918, 0.026167251, -0.0042491527,
							     -0.0043029394, 0.013292049, -0.008821026, 0.006030839, -0.008357115, -0.020761684, 0.0062594325, 0.015732624, 0.006925043, -0.015423349,
							     -0.030658444, 0.027996, 0.003346544, 0.010327055, 0.0014261891, 0.030739125, 0.02304762, -0.018327832, 0.005109741, -0.015302328,
							     0.013426516, -0.0028843142, 0.018771574, 0.014428294, -0.004155026, -0.015544369, -0.014065234, 0.003111227, 0.038860925, 0.009930378,
							     0.019269101, -0.01158432, -0.019699395, -8.4083807E-4, 0.0018472385, -0.014334167, -0.01574607, 0.017104184, -0.016875591, -0.012976052,
							     -0.010575819, 0.008175585, 0.011812914, 0.004188643, -0.012875202, -0.02620759, -0.016983164, -0.010952326, 0.031680394, 0.022482859,
							     0.00279523, 0.010905262, 0.012928989, -3.1725774E-4, 7.7318447E-4, -0.019578375, 0.0026859755, 0.009278214, 0.0018237068, 0.014051787,
							     0.014993055, 0.015772963, -0.0038726456, 0.022536647, -0.016404957, -0.0086932825, 0.011678447, -0.021555038, 0.015759517, -0.0037617104,
							     0.018596767, 0.01671423, -0.01162466, 5.668619E-4, 0.015329222, 0.021191977, 0.019430462, -0.0024691478, -0.014105573, 8.807579E-4,
							     -0.008182309, 0.0063602827, -0.020519642, 0.004820637, -0.014751014, 0.017359672, 0.017547926, -0.010589265, 0.02236184, 0.00559046,
							     0.020196922, -0.017010057, 0.002682614, -0.014966162, 0.0087268995, 0.004639107, 0.009869868, -0.006336751, 0.017695839, 8.1520533E-4,
							     -0.017305885, -0.012814692, 0.002580083, 0.0030977803, -0.021353338, -0.0075032506, -0.005422376, -0.014966162, -0.016835252, -0.02101717,
							     0.025266323, -0.0031902264, -0.01112041, -0.034073904, -0.021286104, -0.010690115, -0.0020859172, -0.018731235, -0.0020640662, 0.005277824,
							     -0.02848008, -0.011779297, 0.024580542, 0.019201867, 0.011732234, 0.012828139, 0.0037012002, 0.031196311, -0.016754571, -0.0089286,
							     -0.013749236, -0.010064845, -0.0054929713, -0.00227249, 0.002333, -0.019497694, -0.0057182033, -0.0024641051, 0.009204256, 0.0019733012,
							     0.016687337, -0.022603879, -7.5763674E-4, -0.0032709064, 0.0043130247, 0.026853032, -0.0050391457, -0.025669724, 0.0072410405, -0.033939436,
							     0.010394288, 0.018220259, 0.013399622, 0.020116242, 0.016364617, 0.015409903, -0.02421748, -9.168959E-4, 0.024378842, -0.023397233,
							     0.0059131803, -0.018166473, 0.015705729, 0.016633552, 0.006498111, -0.010078291, 0.030255044, -0.015557816, -0.008262988, -0.034557983,
							     0.0039734957, 0.004195366, -0.005472801, 0.0036104352, 0.037220426, -0.008639496, -0.012431461, 0.0014329125, -0.017964773, 0.011691893,
							     0.007193977, 0.005086209, -0.022429073, -0.040017337, -0.01160449, 0.018045453, -0.004709702, 0.023961995, -0.022751793, 0.0018337918,
							     -0.023114853, -0.00975557, -0.012149081, -0.04012491, -0.025857978, -0.011517087, 0.0139845535, 0.021286104, -0.014589654, -0.007469634,
							     -0.017346226, 0.014482081, -0.022066012, -0.02150125, -0.025051177, -0.021729846, 0.04025938, 0.0073553375, 0.017238652, -0.0024540203,
							     0.026785798, -0.0019295994, 0.002047258, 0.01373579, 0.014119021, 0.027969107, -0.024809135, 0.018045453, 0.0417923, 0.011053176,
							     0.019201867, 0.0031448437, -3.811295E-4, 0.010427905, 0.0049584657, 1.7795849E-4, 0.0046525532, -0.01353409, -7.2612107E-4, -0.021743292,
							     -0.0023212342, -0.02025071, -0.038807135, -0.014226594, 0.021326445, 0.024163695, 0.012848308, -0.0095000835, 0.035902653, -0.024392288,
							     0.0056039062, 0.012599545, -0.008229372, -0.005066039, -0.022213925, 0.007267934, 0.010528755, 0.019538036, -0.0076780575, 0.010555648,
							     -0.021823972, -0.0053080795, 5.786277E-4, 0.008740346, -0.012485248, -0.0073015504, -0.020116242, 0.0048172753, -0.013150859, 0.014670335,
							     -0.027727067, -0.013971107, 0.025494916, 0.019524587, -0.010481692, 0.008975663, -0.01112041, -0.03923743, -0.0031263544, -0.003912986,
							     0.012310442, 5.9459566E-5, 0.025333557, 0.02224082, -0.0043029394, -0.030739125, -0.003027185, 0.0076982277, -0.009970718, 0.004840807,
							     0.001852281, -0.020828918, -0.0095337005, 0.02722954, -0.0034036925, -0.010710285, -0.039587043, 0.0288028, 0.009997611, 0.009634551,
							     0.006222454, -0.008908429, -0.007994055, 0.02357204, -3.1158494E-4, -0.004931572, -0.02203912, -0.0038726456, 0.008141968, 0.0076713343,
							     -0.018247154, 0.021756738, -0.011349003, -0.03157282, -0.009332, -0.011389343, -0.014966162, -0.010098461, -0.0076713343, 0.009970718,
							     -0.035122745, -0.014387954, -0.0043937047, 0.009096683, -0.039829083, 0.019094294, -0.01101956, 0.024983943, -0.023598934, -0.017588265,
							     -0.0054896097, 0.019040508, 0.0027397622, 0.003201992, -0.020398622, -0.032191366, -0.026597545, -0.032433406, -0.001914472, 0.022953494,
							     -0.033132635, -0.019269101, -0.021568485, -0.021676058, -0.019376675, -0.0091303, -0.010669946, -0.0065081962, -0.01407868, -0.004676085,
							     -0.019067401, 0.019551482, -0.0023716593, -0.016633552, 0.0038524757, 0.013850086, -0.018274046, 0.037489362, -0.027996, 0.002178363,
							     -0.011617937, 0.0042928546, 6.57627E-4, -0.025669724, 0.0028624632, -0.008410902, -0.034584876, -0.022321498, -0.013386176, 0.04060899,
							     0.009419404, 0.0029431435, 0.013998, 0.014495527, 0.010696839, -0.008901706, -0.021393677, -0.015463689, -0.012229761, -0.006528366,
							     0.027296772, -0.010501862, 0.0069922768, 0.032030005, 0.0010286715, -8.194074E-5, 0.0099841645, -0.011617937, -0.021272657, 0.015530922,
							     -0.0061249654, 0.009318554, -0.0012892011, -4.0613193E-4, -0.013157582, 0.033804968, 0.002630508, -0.011772574, -0.02361238, 0.011779297,
							     -0.009574041, 0.012263378, -0.019941436, -0.02097683, 0.00882775, -0.017682392, -0.047090296, -0.002864144, -0.016660444, 0.026234485,
							     0.0015480497, -0.0275926, -0.01383664, 0.007543591, -0.023625828, 0.0011480108, 0.008222649, 0.0054627163, 0.0031969496, 0.001397615,
							     0.002138023, 0.0070057237, -0.0029515475, 0.010158971, -0.007368784, -0.0031381203, -0.015329222, -0.011227983, -0.009479914, -0.0055803745,
							     -0.01882536, -0.0028893566, 0.004380258, 9.471509E-4, 0.014293827, 0.031653497, -0.0028775907, -0.02101717, -0.025548704, 0.0014026575,
							     0.024997389, 0.016122576, 0.0100177815, -0.0049046786, 0.018879147, 0.004081069, -0.011752403, -0.022832474, -0.0047029783, 0.0046323836,
							     0.0026288272, 0.02224082, -0.0033347781, -0.032110687, 0.0028086766, -0.01992799, 0.013998, 0.029851643, -0.0070527866, 0.05327577,
							     0.0013572748, -0.013285326, -0.017642053, -3.3742777E-4, -0.018529534, -0.033751182, 0.0036104352, -0.018677447, -0.016176363, -0.022133246,
							     0.008417626, -0.024204034, 0.0018640469, 0.0027481664, 0.006323304, -0.010643052, 0.018045453, 0.028022895, -0.026799245, -0.0014522421,
							     -0.00703934, -0.014710675, 9.3286386E-4, -0.010387565, 0.021447465, -0.0024994027, -0.011980997, 0.008962216, -0.0010774158, -0.020586876,
							     0.004420598, 0.008303328, -0.0033885648, -0.0072208703, 0.16254354, -0.0037516253, -0.008498305, 0.056637444, 0.003223843, 0.02284592,
							     0.013453409, 0.0106296055, -7.8663114E-4, 0.0028305275, -0.035499252, 0.023397233, -0.032083794, 0.00289608, 0.016485637, -0.018664,
							     -0.0144686345, -0.019363228, -0.028722122, -0.015934324, 4.8576153E-4, -0.01992799, -0.014777908, -0.0037381786, 0.016579764, 0.0037549871,
							     0.0029044843, 0.006027477, 0.027807746, -0.016216703, -0.020963384, 0.004430683, 0.01142296, -0.0063905376, -0.0014387954, -0.010864923,
							     -0.016620103, -0.008041118, 0.0077049513, 0.034584876, 0.033293996, 0.013601323, -2.4204035E-4, 0.0044676615, 0.02004901, 0.034719344,
							     -0.018408513, -0.0077923546, 0.0020186838, 0.008068012, -0.015920876, 0.009923655, 0.037516255, 0.052899264, 0.005553481, 0.01862366,
							     0.008061288, 0.0017783243, 0.0027061456, 0.006380453, -0.027646387, 0.028184254, -0.03485381, 0.0015539327, -0.016404957, 0.007550314,
							     -0.038242374, 0.018274046, -0.007193977, -0.012720565, -0.0068275547, -0.027310219, -0.015423349, -0.009748847, 3.9121453E-4, -0.013782853,
							     0.05814347, 0.01699661, 0.020062456, 0.012868479, 0.007469634, -0.0022758516, -0.009849697, -5.0608913E-5, 0.0023884675, -0.005946797,
							     0.023908207, 0.017010057, -0.028291827, 7.748653E-4, -0.024419181, -0.022576986, -0.006316581, -0.0152754355, 0.019766629, 0.014387954,
							     0.0060510086, 0.02012969, 0.003336459, 0.015208202, -0.017709285, 0.0086932825, 0.0080814585, 0.004131494, 1.8279089E-4, 0.008713452,
							     -0.010696839, 0.010938879, 0.009258043, -0.012122188, -0.010676669, -0.009829528, 0.014952715, 0.00567114, 0.013231539, -0.0056039062,
							     -0.018731235, -0.0055736513, 0.0100177815, -0.0035297552, 0.0112078125, -0.017359672, -0.008094905, 0.016095683, 0.0069653834, 0.0011093516,
							     -0.014858589, -0.008182309, 0.0078058015, -0.0027246347, 0.016243597, -0.022913152, 0.014549314, 0.001043799, -0.022052566, 6.685524E-4,
							     -0.0032994805, -0.01834128, -0.016404957, 0.010037951, -0.0070595103, -0.0025128494, 0.012969329, -0.00114633, -0.011160749, -0.025468023,
							     0.02224082, -0.0075973775, -0.025669724, -0.02296694, -0.005284548, -0.009742124, 0.0052576545, 0.0029330584, 0.017588265, -0.0112078125,
							     -0.028775908, -0.028856589, 0.007906651, 0.024163695, -0.025615936, 5.466918E-4, 0.03907607, -0.017897539, -0.010777519, -0.001842196,
							     -0.17469935, 0.014576208, 0.008020949, -0.0010303523, 0.0034020115, -0.007106574, 0.02588487, 0.021797078, -0.013971107, 0.011826361,
							     0.044669893, -0.0038054122, -0.034100797, -0.011799467, -0.005785437, 0.0012942435, -0.017642053, 0.008626049, 0.008478136, 0.004834084,
							     0.018193366, -0.015920876, 0.014952715, -0.018274046, 0.017225204, 0.010501862, 0.014119021, 0.011174196, -0.0021817249, -0.003919709,
							     -0.0045685116, 0.013392899, 0.023397233, 0.007846141, -1.257344E-5, 0.013419793, -0.029959217, -0.017453799, 0.01101956, 0.024325056,
							     0.009627827, 0.03635984, -0.01178602, -0.012296994, -0.011268323, 0.023061067, 0.0052677393, 0.012034784, 0.030362617, -0.017668946,
							     -0.0065250043, -0.0086932825, -0.0021245764, 0.0076377178, 0.024150249, 0.012189421, -0.015934324, 0.01331222, 0.0072343173, 0.0039970274,
							     0.0030658445, -0.010535479, 0.006155221, -0.0027078264, -0.009063066, -0.008720176, -0.010824583, 0.0037549871, -0.027565707, -0.005341696,
							     -0.0025868062, -0.010522032, 0.00943285, -0.023787187, 0.0076915044, 0.0015026672, -7.286423E-4, 0.0028708675, -8.4041787E-4, -0.01594777,
							     -0.0030944187, 0.039425682, 0.0058257766, -0.0017228567, 0.0030658445, 0.014737568, -0.012263378, -0.0067300666, 0.015840197, -0.02848008,
							     0.019255655, -0.021676058, -0.012902095, -0.0073149973, 0.016969718, 0.020640664, -0.0018808552, -0.007032617, -0.0011791063, -0.027861534,
							     -0.0017110908, 1.5894404E-4, -0.035095852, 0.048999723, 0.021044064, -0.012586098, 0.0028170808, 0.01618981, 0.03740868, -0.010448075,
							     -0.009399233, 0.0035263933, 0.047305442, 0.019806968, -0.004602128, 0.022913152, 0.012357504, -0.0077520143, 0.024486415, -0.021555038,
							     0.037354894, 0.0033919266, 0.0040071122, 0.0027145497, -0.0024809137, -0.005987137, -0.09955926, -0.038323056, 0.014535868, 0.021070957,
							     0.008088182, 0.031115633, -4.0340057E-4, 0.007375507, -0.027404346, 0.019901095, -0.013466856, -0.049967885, -0.009937101, -0.018287493,
							     0.016243597, -0.014092127, -0.0054492694, -0.03595644, -0.03307885, 0.020264156, -0.007375507, -0.02341068, 0.017830307, -0.024943603,
							     0.008182309, -7.563761E-6, -0.015194755, 0.0031347587, 0.034315944, -0.00693849, 0.00955387, -0.0069048735, 0.014186254, -0.023545148,
							     -7.899928E-4, -0.001192553, -0.026301717, 0.00923115, 0.025925212, -0.007879758, 0.018758127, 0.011147303, 0.0089286, -0.00965472,
							     0.01870434, -0.030550871, -0.012028061, -0.0031801413, 0.014925822, -0.008202478, -0.021084404, 0.0038423906, -0.021958439, 0.010058121,
							     0.009237873, 0.014845141, 0.013137412, 0.014307274, -0.008962216, 0.016445298, 0.002548147, 0.0054627163, 0.011396066, 0.020344837,
							     0.011214537, -0.0034036925, -0.018032007, -0.025252877, 0.017467245, -0.03133078, -0.015046841, 0.030631552, -0.007846141, -0.011268323,
							     -0.033670504, 0.019094294, -0.028587654, 0.0058829254, 0.01610913, -0.036037117, 0.003889454, -0.007604101, 0.013998, -0.015840197,
							     0.006229177, 1.5153785E-5, 0.01152381, -0.010871646, -0.006407346, -0.008115075, 0.0019884286, 0.036655664, 0.012465078, 0.005445908,
							     -0.008646219, 0.034800023, 0.0061384123, -0.0014589655, 0.021689504, -0.004430683, -0.013238262, -0.004188643, -0.044535425, 0.031169418,
							     -0.021030618, -0.007960438, 0.014966162, 0.0047298716, 0.025252877, 0.005035784, -4.471023E-4, 0.012384398, 0.002445616, 0.006693088,
							     -0.007267934, -2.4666265E-4, -0.02268456, -0.020828918, 0.021568485, -0.008027672, 0.011006112, 0.0030255043, 0.0063468358, 0.014724121,
							     0.019269101, 0.02012969, -0.0013665195, -3.8827307E-4, 0.0016783145, -0.009405957, -0.020035563, -0.011006112, 0.0014034979, -0.040582098,
							     -0.008632773, 0.031411458, 0.006212369, -0.033240207, -0.011698617, 0.009083237, 0.024392288, 0.027942214, -0.015060289, -0.033912543,
							     -0.009036173, -0.014643441, -0.0139845535, 0.01667389, -0.019013613, 0.014616548, 0.02934067, -0.017131079, 0.0051803356, 0.011140579,
							     -0.016808357, -0.025145303, -0.012734012, -0.021971885, 0.001892621, -0.010501862, 0.0031280355, -0.028318722, 0.01830094, -0.0064342394,
							     0.0025330195, -0.004891232, -0.014334167, -0.023585487, -0.00356001, 0.012491971, 0.02576385, -0.018744681, -0.011106962, 0.0098228045,
							     0.0075368676, 0.010098461, 0.022698006, 0.00959421, -0.01834128, -0.027780853, -5.105539E-4, 0.016942825, -0.00691832, -0.020237263,
							     -0.019363228, 0.027242986, 0.028937269, -0.005980414, -0.02682614, -0.0054795244, -0.0058694785, 9.029239E-5, -6.2653155E-4, 9.295022E-4,
							     0.028533868, 0.00452481, 0.012875202, 0.0069855535, -0.013581153, -0.00474668, 0.012202867, 0.024983943, 0.008249542, 0.0014018171,
							     0.006373729, -0.016902484, -0.017547926, 0.0054929713, -0.030013002, -0.028291827, -0.019914541, 0.019000167, 0.012828139, -0.010481692,
							     -0.0019884286, 0.021904651, -0.013944213, 0.004376896, -0.02747158, 0.0013371048, -0.0068107466, 0.034719344, -0.005415653, 0.022698006,
							     0.003030547, 0.006303134, 0.02337034, 0.0044374065, 0.02337034, -0.03358982, -0.0180589, -0.007758738, 0.011456576, 0.009641274,
							     -0.016848698, -0.004124771, -0.033455353, 0.0023481275, 2.164076E-4, 0.02783464, -0.011349003, 0.07519387, 0.004434045, -0.021891205,
							     0.019806968, -0.003336459, 0.017709285, 0.024889816, 0.0024876369, -0.025427684, -0.0015942727, 0.041362006, -0.012196144, 0.023114853,
							     -2.6643873E-5, -0.03810791, 0.0077923546, -0.010864923, 0.034262158, -0.020008668, -0.014508975, 0.013439963, -4.0802287E-4, 0.014831695,
							     -0.009473191, -0.024795689, -0.0044037895, 0.02017003, -0.026221039, -0.0056072683, 0.008498305, -4.9500616E-4, -0.01858332, -0.054970052,
							     -0.0037516253, 0.035660613, -0.030846698, -0.0070460634, -0.019174974, 0.006047647, 0.01809924, 0.0069721066, 0.02775396, -0.018852254,
							     -0.020385176, 0.026073124, 0.0053450577, -0.008363838, -0.005829138, -0.011187643);

    /**
     * Return the embedding of "the" as a Float list (for Pinecone).
     */
    public static List<Float> getTheEmbeddingAsFloats() {
	List<Float> encodedQuery = new ArrayList<>();
	for (Double d : THE_EMBEDDING) {
	    encodedQuery.add(d.floatValue());
	}
	return encodedQuery;
    }

}
