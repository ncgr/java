#!/bin/bash

INPUTPREFIX=$1

## svm file HLAA has 4966/6243
NUMCASEPATHS=0
NUMCTRLPATHS=0
SVMFILE="$INPUTPREFIX.svm.txt"
RANGE="$INPUTPREFIX.svm.range.txt"
FULLSCALE="$INPUTPREFIX.svm.scale.txt"


## grid scan
GRIDOUT="$INPUTPREFIX.svm.grid.txt"
K=10
LOG10C="0,0,1"
LOG10GAMMA="-3,-1,0.5"

## pre-clean during testing; forces operation to be run
rm -f $SVMFILE
rm -f $RANGE
rm -f $FULLSCALE
rm -f $GRIDOUT

# usage: FRUtils
#  -arff,--arff             print out an ARFF style file from the data given
#                           by inputprefix
#  -i,--inputprefix <arg>   prefix of input files (e.g. HLAA-0.1-Inf)
#  -m,--minsupport <arg>    minimum number of supporting paths for a region
#                           to be considered interesting
#  -np,--numpaths <arg>     number of case/control balanced paths to include
#                           in SVM or ARFF output
#  -p,--postprocess         postprocess by applying new minsup, minsize to
#                           an FR set given by inputprefix
#  -s,--minsize <arg>       minimum number of nodes that a FR must contain
#                           to be considered interesting
#  -svm,--svm               print out an SVM style file from the data given
#                           by inputprefix
if [ ! -s $SVMFILE ]
then
    echo "Writing $SVMFILE with $NUMCASEPATHS cases and $NUMCTRLPATHS controls"
    java -server -cp "build/install/fr/lib/*" org.ncgr.pangenomics.genotype.fr.FRUtils -svm -i $INPUTPREFIX -ncase $NUMCASEPATHS -nctrl $NUMCTRLPATHS
fi

# usage: SvmScaler [options]
#  -d,--datafile <arg>      SVM data file
#  -l,--xlowerlimit <arg>   x scaling lower limit [-1]
#  -s,--savefile <arg>      file to save scaling parameters to
#  -u,--xupperlimit <arg>   x scaling upper limit [+1]
#  -y,--ylimits <arg>       y scaling limits yLower,yUpper [no y scaling]

if [ ! -s $FULLSCALE ]
then
    ## scale the SVM data
    echo "Scaling $SVMFILE"
    java -server -cp "build/install/fr/lib/*" org.ncgr.svm.SvmScaler -s $RANGE -d $SVMFILE > $FULLSCALE
fi

# usage: GridSearcher
#  -k <arg>       k-fold for cross validation [10]
#  -log10C <arg>   set range/step of log10(C) [-5.0,15.0,1.0]
#  -log10gamma <arg>   set range/step of log10(gamma) [-15.0,0.0,1.0]
#  -v             toggle verbose output
# if [ ! -s $GRIDOUT ]
# then
#     ## run GridSearcher on the full scaled data to find optimum SVM parameters
#     ARGS="-log10C $LOG10C -log10gamma $LOG10GAMMA -k $K"
#     echo "Running GridSearcher on $FULLSCALE with ARGS=$ARGS"
#     java -server -Xms10g -Xmx600g -XX:+UseParallelGC -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20 -cp "build/install/fr/lib/*" org.ncgr.svm.GridSearcher -v $ARGS $FULLSCALE > $GRIDOUT
# fi

# usage: SvmCrossValidator [options]
#  -C,--cost <arg>                       cost parameter C in C-SVC,
#                                        epsilon-SVR and nu-SVR [1]
#  -coef0,--kernel-coef0 <arg>           coef0 parameter in kernel function
#                                        [0]
#  -d,--kernel-degree <arg>              degree parameter in kernel function
#                                        [3]
#  -e,--epsilon <arg>                    set tolerance of termination
#                                        criterion [0.001]
#  -ep,--epsilon-loss <arg>              epsilon value in loss function of
#                                        epsilon-SVR [0.1]
#  -gamma,--kernel-gamma <arg>           gamma parameter in kernel function
#                                        [1/#features]
#  -i,--inputfile <arg>                  input file containing feature
#                                        vectors in SVM format
#  -k,--nrfold <arg>                     k value for k-fold cross-validation
#                                        [10]
#  -m,--cachesize <arg>                  set cache memory size in MB [100]
#  -nu,--nu <arg>                        nu parameter of nu-SVC, one-class
#                                        SVM, and nu-SVR [0.5]
#  -prob,--probability-estimates <arg>   toggle whether to train a SVC or
#                                        SVR model for probability estimates
#                                        (0/1) [0]
#  -s,--svm-type <arg>                   type of SVM: 0=C-SVC 1=nu-SVC
#                                        2=one-class SVM 3=epsilon-SVR
#                                        4=nu-SVR [0]
#  -sh,--shrinking <arg>                 toggle whether to use the shrinking
#                                        heuristics (0/1) [1]
#  -t,--kernel-type <arg>                type of kernel function: 0=linear
#                                        1=polynomial 2=radial basis
#                                        function 3=sigmoid 4=precomputed
#                                        kernel [2]
#  -v,--verbose                          verbose output
#  -w,--weight <arg>                     multiply parameter C of class i by
#                                        weight, for C-SVC [1]

# if [ -s $GRIDOUT ]
# then

# ## gridsearcher best parameters
# C=`tail -1 $GRIDOUT | awk '{ print $1; }'`
# gamma=`tail -1 $GRIDOUT | awk '{ print $2; }'`
# perc=`tail -1 $GRIDOUT | awk '{ print $3; }'`
# ARGS="-C $C -gamma $gamma -k $K"

## use default gamma=1/numFeatures
ARGS="-h 0 -m 1000 -C 1.0 -k $K"
echo "Running SvmCrossValidator on $FULLSCALE with $ARGS"
for i in 1 
do
    java -server -cp "build/install/fr/lib/*" org.ncgr.svm.SvmCrossValidator $ARGS -i $FULLSCALE > "$INPUTPREFIX-$i.crossvalidation.txt"
done

## fi
